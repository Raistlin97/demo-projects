/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CopyMultiFilesPanel.java
 *
 * Created on Jun 20, 2011, 1:01:16 PM
 */
package com.gs.tools.fs.ui;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import com.gs.utils.enums.DisplayTypeEnum;
import com.gs.utils.swing.display.DisplayUtils;
import com.gs.utils.swing.file.FileBrowserUtil;
import com.gs.utils.text.StringUtil;

/**
 *
 * @author sabuj.das
 */
public class CopyMultiFilesPanel extends javax.swing.JPanel implements PropertyChangeListener {

	private CopyMultiFileTask copyMultiFileTask;
	
    /** Creates new form CopyMultiFilesPanel */
    public CopyMultiFilesPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        sourceRootTextField = new javax.swing.JTextField();
        targetTextField = new javax.swing.JTextField();
        selectSourceButton = new javax.swing.JButton();
        selectTargetButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton3 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        importFilesButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        sourceFilesList = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        fromTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        toTextField = new javax.swing.JTextField();
        chkDirCheckBox = new javax.swing.JCheckBox();
        startCopyButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        currentFileLabel = new javax.swing.JLabel();
        copyProgressBar = new javax.swing.JProgressBar();
        jToolBar2 = new javax.swing.JToolBar();
        clearLogButton = new javax.swing.JButton();
        copyLogButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();

        FormListener formListener = new FormListener();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18));
        jLabel1.setText("Copy Files");

        jLabel2.setText("Source Folder");

        jLabel3.setText("Destination Folder");

        sourceRootTextField.setEditable(false);

        targetTextField.setEditable(false);

        selectSourceButton.setText("Browse");
        selectSourceButton.addActionListener(formListener);

        selectTargetButton.setText("Browse");
        selectTargetButton.addActionListener(formListener);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(" Files "));

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton3.setText("ADD");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(formListener);
        jToolBar1.add(jButton3);
        jToolBar1.add(jSeparator2);

        jButton4.setText("REM");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(formListener);
        jToolBar1.add(jButton4);

        jButton5.setText("REM All");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(formListener);
        jToolBar1.add(jButton5);
        jToolBar1.add(jSeparator4);

        importFilesButton.setText("Import");
        importFilesButton.setFocusable(false);
        importFilesButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        importFilesButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        importFilesButton.addActionListener(formListener);
        jToolBar1.add(importFilesButton);

        sourceFilesList.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(sourceFilesList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(" Actions "));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText("Copy Files from: ");

        fromTextField.setEditable(false);

        jLabel5.setText("From ");

        jLabel6.setText("To");

        toTextField.setEditable(false);

        chkDirCheckBox.setText("Create Folder If NOT Exists");

        startCopyButton.setText("Start");
        startCopyButton.addActionListener(formListener);

        jLabel7.setText("Copying:");

        currentFileLabel.setForeground(new java.awt.Color(0, 0, 204));

        copyProgressBar.setDoubleBuffered(true);
        copyProgressBar.setStringPainted(true);

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        clearLogButton.setText("Clear");
        clearLogButton.setFocusable(false);
        clearLogButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearLogButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearLogButton.addActionListener(formListener);
        jToolBar2.add(clearLogButton);

        copyLogButton.setText("Copy");
        copyLogButton.setFocusable(false);
        copyLogButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        copyLogButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        copyLogButton.addActionListener(formListener);
        jToolBar2.add(copyLogButton);

        logTextArea.setColumns(20);
        logTextArea.setEditable(false);
        logTextArea.setRows(5);
        logTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(logTextArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkDirCheckBox, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(startCopyButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(toTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                            .addComponent(fromTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))))
                .addContainerGap())
            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                    .addComponent(copyProgressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                    .addComponent(currentFileLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(toTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkDirCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startCopyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(currentFileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(copyProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 837, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sourceRootTextField)
                            .addComponent(targetTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectSourceButton)
                            .addComponent(selectTargetButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(sourceRootTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectSourceButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(targetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectTargetButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == selectSourceButton) {
                CopyMultiFilesPanel.this.selectSourceButtonActionPerformed(evt);
            }
            else if (evt.getSource() == selectTargetButton) {
                CopyMultiFilesPanel.this.selectTargetButtonActionPerformed(evt);
            }
            else if (evt.getSource() == jButton3) {
                CopyMultiFilesPanel.this.jButton3ActionPerformed(evt);
            }
            else if (evt.getSource() == jButton4) {
                CopyMultiFilesPanel.this.jButton4ActionPerformed(evt);
            }
            else if (evt.getSource() == jButton5) {
                CopyMultiFilesPanel.this.jButton5ActionPerformed(evt);
            }
            else if (evt.getSource() == startCopyButton) {
                CopyMultiFilesPanel.this.startCopyButtonActionPerformed(evt);
            }
            else if (evt.getSource() == clearLogButton) {
                CopyMultiFilesPanel.this.clearLogButtonActionPerformed(evt);
            }
            else if (evt.getSource() == copyLogButton) {
                CopyMultiFilesPanel.this.copyLogButtonActionPerformed(evt);
            }
            else if (evt.getSource() == importFilesButton) {
                CopyMultiFilesPanel.this.importFilesButtonActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void selectSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSourceButtonActionPerformed
    	File dir = FileBrowserUtil.openSingleFile(this, null, true);
    	if(null != dir){
    		sourceRootTextField.setText(dir.getAbsolutePath());
    		fromTextField.setText(dir.getAbsolutePath());
    	}
    }//GEN-LAST:event_selectSourceButtonActionPerformed

    private void selectTargetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectTargetButtonActionPerformed
    	File dir = FileBrowserUtil.openSingleFile(this, null, true);
    	if(null != dir){
    		targetTextField.setText(dir.getAbsolutePath());
    		toTextField.setText(dir.getAbsolutePath());
    	}
    }//GEN-LAST:event_selectTargetButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(StringUtil.hasValidContent(sourceRootTextField.getText())
        		&& StringUtil.hasValidContent(targetTextField.getText())){
        	File[] files = FileBrowserUtil.openMultipleFile(this, null, false, sourceRootTextField.getText());
            if(null != files){
            	String[] fileNames = new String[files.length];
            	int i = 0;
            	for (File file : files) {
    				fileNames[i] = file.getAbsolutePath();
    				((DefaultListModel)sourceFilesList.getModel()).addElement(fileNames[i]);
    				i ++;
    			}
            	sourceFilesList.updateUI();
            }
        }
        else{
        	DisplayUtils.displayMessage(this, "Please Select Source and Target folders", DisplayTypeEnum.WARN);
        }
    	
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    	if(sourceFilesList.getSelectedIndex()>=0)
    		((DefaultListModel)sourceFilesList.getModel()).remove(sourceFilesList.getSelectedIndex());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    	((DefaultListModel)sourceFilesList.getModel()).removeAllElements();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void startCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startCopyButtonActionPerformed
        if(((DefaultListModel)sourceFilesList.getModel()).size() <= 0){
        	DisplayUtils.displayMessage(this, "No Files to be copied !!!");
        	return;
        }
        List<String> fileNameList = new ArrayList<String>();
        for(int i=0; i < ((DefaultListModel)sourceFilesList.getModel()).size(); i++){
        	String fileName = (String) ((DefaultListModel)sourceFilesList.getModel()).getElementAt(i);
        	fileNameList.add(fileName);
        }
        synchronized (this) {
        	copyMultiFileTask = new CopyMultiFileTask();
        	copyMultiFileTask.setFileNameList(fileNameList);
        	copyMultiFileTask.setCreateDirectory(chkDirCheckBox.isSelected());
        	copyMultiFileTask.setSourceRoot(sourceRootTextField.getText());
        	copyMultiFileTask.setTargetRoot(targetTextField.getText());
        	
        	copyMultiFileTask.addPropertyChangeListener(this);
        	copyMultiFileTask.execute();
		}
    }//GEN-LAST:event_startCopyButtonActionPerformed

    private void clearLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLogButtonActionPerformed
        logTextArea.setText("");
    }//GEN-LAST:event_clearLogButtonActionPerformed

    private void copyLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyLogButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_copyLogButtonActionPerformed

    private void importFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importFilesButtonActionPerformed
        ImportFilesFromTextDialog dialog = new ImportFilesFromTextDialog(null, true);
        dialog.setSourceFilesList(sourceFilesList);
        dialog.setVisible(true);
        
    }//GEN-LAST:event_importFilesButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkDirCheckBox;
    private javax.swing.JButton clearLogButton;
    private javax.swing.JButton copyLogButton;
    private javax.swing.JProgressBar copyProgressBar;
    private javax.swing.JLabel currentFileLabel;
    private javax.swing.JTextField fromTextField;
    private javax.swing.JButton importFilesButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton selectSourceButton;
    private javax.swing.JButton selectTargetButton;
    private javax.swing.JList sourceFilesList;
    private javax.swing.JTextField sourceRootTextField;
    private javax.swing.JButton startCopyButton;
    private javax.swing.JTextField targetTextField;
    private javax.swing.JTextField toTextField;
    // End of variables declaration//GEN-END:variables

    private void enableControls(boolean enable){
    	selectSourceButton.setEnabled(enable);
    	selectTargetButton.setEnabled(enable);
    	jButton3.setEnabled(enable);
    	jButton4.setEnabled(enable);
    	jButton5.setEnabled(enable);
    	chkDirCheckBox.setEnabled(enable);
    	startCopyButton.setEnabled(enable);
    }

	@Override
	public void propertyChange(PropertyChangeEvent evt) {
		if(copyMultiFileTask.equals(evt.getSource())){
			String propertyName = evt.getPropertyName();
			if(CopyMultiFileTask.PROPERTY_PROGRESS.equals(propertyName)){
				String progressType = evt.getNewValue().toString();
				if(CopyMultiFileTask.TASK_STATUS_START.equals(progressType)){
					Object oldValue = evt.getOldValue();
					if(null == oldValue){
						logTextArea.append("\n............................................\nFile copy started .....");
						enableControls(false);
					} else {
						currentFileLabel.setText(oldValue.toString());
					}
				}
				
				if(CopyMultiFileTask.TASK_STATUS_DONE.equals(progressType)){
					Object[] data = (Object[]) evt.getOldValue();
					try{
						String currentFile = data[0].toString();
						currentFileLabel.setText(currentFile);
						logTextArea.append("\nCopying : " + currentFile);
						logTextArea.updateUI();
						
						int currentCount = new Integer(data[1].toString());
						int totoalCount = new Integer(data[2].toString());
						int percent = (int)(((float)(float)currentCount / (float)totoalCount) * 100.0F);
						logTextArea.append("\n\t"+percent+"% completed...");
						logTextArea.updateUI();
					} catch (ArrayIndexOutOfBoundsException e){
						e.printStackTrace();
					}
				}
				
				if(CopyMultiFileTask.TASK_STATUS_FAILED.equals(progressType)){
					Object[] data = (Object[]) evt.getOldValue();
					try{
						String errorMessage = data[0].toString();
						currentFileLabel.setText("");
						logTextArea.append("\nERROR::- "+errorMessage);
						logTextArea.updateUI();
						
						int currentCount = new Integer(data[1].toString());
						int totoalCount = new Integer(data[2].toString());
						int percent = (int)(((float)(float)currentCount / (float)totoalCount) * 100.0F);
						logTextArea.append("\n\t"+percent+"% completed...");
						logTextArea.updateUI();
					} catch (ArrayIndexOutOfBoundsException e){
						e.printStackTrace();
					}
				}
			}
			
			if(CopyMultiFileTask.TASK_STATUS_DONE.equals(propertyName)){
				currentFileLabel.setText("File copy completed !!");
				Long time = (Long)evt.getOldValue();
				Integer hitCount = (Integer) evt.getNewValue();
				logTextArea.append("\n[ " + hitCount + " ] files copied in " + time + " ms.\n............................................");
				enableControls(true);
			}
			
			if ("progress" == evt.getPropertyName()) {
				int progress = (Integer) evt.getNewValue();
				copyProgressBar.setValue(progress);
			}
						
		}
	}
}
