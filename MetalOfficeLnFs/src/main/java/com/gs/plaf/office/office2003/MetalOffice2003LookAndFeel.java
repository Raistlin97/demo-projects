/** ***************************************************************************
 *		MetalOfficeLnF :: Office Look and Feel from Metal	
 *	
 *	File	: MetalOffice2003LookAndFeel.java
 *	Type	: com.gs.plaf.office.office2003.MetalOffice2003LookAndFeel.java
 *	Date	: Jan 3, 2010	8:47:14 AM
 *
 *	Author	: Sabuj Das
 *
 *	
 *****************************************************************************/
package com.gs.plaf.office.office2003;

import java.awt.KeyboardFocusManager;
import java.security.AccessController;
import java.security.PrivilegedAction;

import javax.swing.Icon;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import javax.swing.plaf.metal.MetalLookAndFeel;

import com.gs.plaf.common.MetalOfficePlafConstants;
import com.gs.plaf.office.office2003.menu.MetalOffice2003MenuUI;
import com.gs.plaf.util.LnFUtils;

/**
 *
 */
public class MetalOffice2003LookAndFeel extends MetalLookAndFeel implements MetalOfficePlafConstants{

	/**
	 * serialVersionUID = 6673859481621141763L
	 * 	--	Generated by eclipse
	 */
	private static final long serialVersionUID = 6673859481621141763L;
	private static int is1dot4 = -1;
	private static boolean isInstalled = false;

	/**
	 * Initialize the LnF
	 */
	public void initialize() {
		super.initialize();
		if (!(isInstalled)) {
			isInstalled = true;
			if (is1dot4 == -1) {
				String version = (String) AccessController
						.doPrivileged(new PrivilegedAction() {
							public Object run() {
								return System.getProperty("java.version");
							}
						});
				if (version != null) {
					is1dot4 = ((version.startsWith("1.0"))
							|| (version.startsWith("1.1"))
							|| (version.startsWith("1.2"))
							|| (version.startsWith("1.3")) 
							|| (version.startsWith("1.4"))) 
						? 0 : 1;
				} else {
					is1dot4 = 1;
				}
			}
			UIManager.installLookAndFeel(new UIManager.LookAndFeelInfo(
			        "MetalOffice2003LookAndFeel", 
			        "com.gs.plaf.office.office2003.MetalOffice2003LookAndFeel"));
		}
		if ("false".equals(System.getProperty("altClosesMenu"))) 
			return;
	    KeyboardFocusManager.getCurrentKeyboardFocusManager()
	    		.addKeyEventPostProcessor(MetalOffice2003MenuUI.altProcessor);
	}

	/**
	 * Un-install the LnF
	 */
	public void uninitialize() {
		super.uninitialize();
		KeyboardFocusManager.getCurrentKeyboardFocusManager()
	      .removeKeyEventPostProcessor(MetalOffice2003MenuUI.altProcessor);
	}

	public String getDescription() {
		return super.getDescription();
	}

	public String getID() {
		return "MetalOffice2003LookAndFeel";
	}

	public String getName() {
		return "MetalOffice2003LookAndFeel";
	}

	public boolean isNativeLookAndFeel() {
		return false;
	}

	public boolean isSupportedLookAndFeel() {
		return true;
	}

	protected void initClassDefaults(UIDefaults table) {
		super.initClassDefaults(table);
		
		table.putDefaults(new Object[] { 
			  "ButtonUI", "com.gs.plaf.office.office2003.control.MetalOffice2003ButtonUI",
			  
			  
		      "CheckBoxUI", "de.muntjak.tinylookandfeel.TinyCheckBoxUI", 
		      "TextFieldUI", "de.muntjak.tinylookandfeel.TinyTextFieldUI", 
		      "TextAreaUI", "de.muntjak.tinylookandfeel.TinyTextAreaUI", 
		      "PasswordFieldUI", "de.muntjak.tinylookandfeel.TinyPasswordFieldUI", 
		      "EditorPaneUI", "de.muntjak.tinylookandfeel.TinyEditorPaneUI", 
		      "TextPaneUI", "de.muntjak.tinylookandfeel.TinyTextPaneUI", 
		      "SliderUI", "de.muntjak.tinylookandfeel.TinySliderUI", 
		      "SpinnerUI", "de.muntjak.tinylookandfeel.TinySpinnerUI", 
		      "ToolBarUI", "de.muntjak.tinylookandfeel.TinyToolBarUI", 
		      "ToolBarSeparatorUI", "de.muntjak.tinylookandfeel.TinyToolBarSeparatorUI", 
		      "MenuBarUI", "de.muntjak.tinylookandfeel.TinyMenuBarUI", 
		      "MenuUI", "de.muntjak.tinylookandfeel.TinyMenuUI", 
		      "MenuItemUI", "de.muntjak.tinylookandfeel.TinyMenuItemUI", 
		      "CheckBoxMenuItemUI", "de.muntjak.tinylookandfeel.TinyCheckBoxMenuItemUI", 
		      "RadioButtonMenuItemUI", "de.muntjak.tinylookandfeel.TinyRadioButtonMenuItemUI", 
		      "ScrollBarUI", "de.muntjak.tinylookandfeel.TinyScrollBarUI", 
		      "TabbedPaneUI", "de.muntjak.tinylookandfeel.TinyTabbedPaneUI", 
		      "ToggleButtonUI", "de.muntjak.tinylookandfeel.TinyButtonUI", 
		      "ScrollPaneUI", "de.muntjak.tinylookandfeel.TinyScrollPaneUI", 
		      "ProgressBarUI", "de.muntjak.tinylookandfeel.TinyProgressBarUI", 
		      "InternalFrameUI", "de.muntjak.tinylookandfeel.TinyInternalFrameUI", 
		      "RadioButtonUI", "de.muntjak.tinylookandfeel.TinyRadioButtonUI", 
		      "ComboBoxUI", "de.muntjak.tinylookandfeel.TinyComboBoxUI", 
		      "PopupMenuSeparatorUI", "de.muntjak.tinylookandfeel.TinyPopupMenuSeparatorUI", 
		      "SeparatorUI", "de.muntjak.tinylookandfeel.TinySeparatorUI", 
		      "SplitPaneUI", "de.muntjak.tinylookandfeel.TinySplitPaneUI", 
		      "FileChooserUI", "de.muntjak.tinylookandfeel.TinyFileChooserUI", 
		      "ListUI", "de.muntjak.tinylookandfeel.TinyListUI", 
		      "TreeUI", "de.muntjak.tinylookandfeel.TinyTreeUI", 
		      "LabelUI", "de.muntjak.tinylookandfeel.TinyLabelUI", 
		      "TableUI", "de.muntjak.tinylookandfeel.TinyTableUI", 
		      "TableHeaderUI", "de.muntjak.tinylookandfeel.TinyTableHeaderUI", 
		      "ToolTipUI", "de.muntjak.tinylookandfeel.TinyToolTipUI", 
		      "RootPaneUI", "de.muntjak.tinylookandfeel.TinyRootPaneUI", 
		      "DesktopPaneUI", "de.muntjak.tinylookandfeel.TinyDesktopPaneUI",
		      "PanelUI", ""
		      
		});
	}

	protected void initComponentDefaults(UIDefaults table) {
		
		super.initComponentDefaults(table);
		
		
	}
	
	public static Icon getUncolorizedSystemIcon(int index) {
		switch (index) {
		case 0:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH,
					"InternalFrameIcon.png", null);
		case 1:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH,
					"TreeFolderClosedIcon.png", null);
		case 2:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH,
					"TreeFolderOpenedIcon.png", null);
		case 3:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "TreeLeafIcon.png",
					null);
		case 4:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "TreeMinusIcon.png",
					null);
		case 5:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "TreePlusIcon.png",
					null);
		case 6:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "ComputerIcon.png",
					null);
		case 7:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "FloppyIcon.png", null);
		case 8:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "HarddiskIcon.png",
					null);
		case 9:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "DirectoryIcon.png",
					null);
		case 10:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "FileIcon.png", null);
		case 11:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH,
					"ParentDirectoryIcon.png", null);
		case 12:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "HomeFolderIcon.png",
					null);
		case 13:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "NewFolderIcon.png",
					null);
		case 14:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "FileListIcon.png",
					null);
		case 15:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "FileDetailsIcon.png",
					null);
		case 16:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "InformationIcon.png",
					null);
		case 17:
			return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "QuestionIcon.png",
					null);
		case 18:
			return LnFUtils
					.loadIcon(OFFICE_IMAGE_PATH, "WarningIcon.png", null);
		}
		return LnFUtils.loadIcon(OFFICE_IMAGE_PATH, "ErrorIcon.png", null);
	}

	public static String getSystemIconName(int index) {
		switch (index) {
		case 0:
			return "InternalFrame.icon";
		case 1:
			return "Tree.closedIcon";
		case 2:
			return "Tree.openIcon";
		case 3:
			return "Tree.leafIcon";
		case 4:
			return "Tree.expandedIcon";
		case 5:
			return "Tree.collapsedIcon";
		case 6:
			return "FileView.computerIcon";
		case 7:
			return "FileView.floppyDriveIcon";
		case 8:
			return "FileView.hardDriveIcon";
		case 9:
			return "FileView.directoryIcon";
		case 10:
			return "FileView.fileIcon";
		case 11:
			return "FileChooser.upFolderIcon";
		case 12:
			return "FileChooser.homeFolderIcon";
		case 13:
			return "FileChooser.newFolderIcon";
		case 14:
			return "FileChooser.listViewIcon";
		case 15:
			return "FileChooser.detailsViewIcon";
		case 16:
			return "OptionPane.informationIcon";
		case 17:
			return "OptionPane.questionIcon";
		case 18:
			return "OptionPane.warningIcon";
		}
		return "OptionPane.errorIcon";
	}
	
	

	
}
