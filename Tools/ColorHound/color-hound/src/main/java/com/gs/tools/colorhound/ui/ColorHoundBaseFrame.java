/** ---------------------------------------------------------------------------*
 * Copyright Sabuj Das | sabuj.das@gmail.com all rights reserved.
 * <br/>
 * This document cannot be copied, modified or re-distributed without prior 
 * permission from the author.
 *  ---------------------------------------------------------------------------* 
 * Type     : com.gs.tools.colorhound.ui.ColorHoundBaseFrame
 * Date     : May 23, 2013
 */

package com.gs.tools.colorhound.ui;

import com.gs.tools.colorhound.ApplicationContext;
import com.gs.tools.colorhound.ColorPalette;
import com.gs.tools.colorhound.event.ApplicationEventManager;
import com.gs.tools.colorhound.event.ColorGrabEvent;
import com.gs.tools.colorhound.event.ColorGrabListener;
import com.gs.tools.colorhound.event.ColorPanelSelectedEvent;
import com.gs.tools.colorhound.event.ColorPanelSelectedEventListener;
import com.gs.tools.colorhound.event.ExternalEventListener;
import com.gs.tools.colorhound.util.GraphicsUtil;
import com.gs.utils.swing.window.WindowUtil;
import java.awt.AWTEvent;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.MenuShortcut;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Sabuj Das | sabuj.das@gmail.com
 */
public class ColorHoundBaseFrame extends javax.swing.JFrame 
    implements ColorGrabListener, ColorPanelSelectedEventListener{

    private final ImageIcon frameIcon = new ImageIcon(getClass().getResource(
               "/images/color-hound-24x24.png"));
    private static ApplicationContext appContext 
            = ApplicationContext.getContext();
    private static ApplicationEventManager eventManager 
            = ApplicationEventManager.getInstance();
    
    /** Creates new form ColorHoundBaseFrame */
    public ColorHoundBaseFrame() {
        initComponents();
        setIconImage(frameIcon.getImage());
        WindowUtil.bringToCenter(this);
        ExternalEventListener externalEventListener
                = new ExternalEventListener();
        Toolkit.getDefaultToolkit().addAWTEventListener(
            externalEventListener, 
            AWTEvent.KEY_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK);
        
        ApplicationEventManager.getInstance().registerListener(
                ColorPanelSelectedEvent.class, this);
        
        appContext.load();
        List<ColorPalette> colorPalettes = appContext.getColorPalettes();
        if(null != colorPalettes && colorPalettes.size() > 0){
            for (ColorPalette colorPalette : colorPalettes) {
                ColorPaletteManager.getInstance().addPalette(
                        colorPalette.getName());
                paletteListComboBox.addItem(colorPalette.getName());
                List<String> colorCodes = colorPalette.getColorCodes();
                if(null != colorCodes && colorCodes.size() > 0){
                    ColorPanel colorPanel = new ColorPanel(paletteContentPanel, 
                            colorPalette.getName());
                    ColorPaletteManager.getInstance().addPanel(
                            colorPalette.getName(), colorPanel);
                } 
            }
            paletteListComboBox.setSelectedIndex(0);
            paletteContentPanel.updateUI();
        }
        
        redRgbTextField.getDocument().addDocumentListener(new DocumentChangeListener(redRgbTextField, rgbCopyButton));
        greenRgbTextField.getDocument().addDocumentListener(new DocumentChangeListener(greenRgbTextField, rgbCopyButton));
        blueRgbTextField.getDocument().addDocumentListener(new DocumentChangeListener(blueRgbTextField, rgbCopyButton));
        
        hexColorTextField.getDocument().addDocumentListener(new DocumentChangeListener(hexColorTextField, hexCopyButton));
        cssRgbTextField.getDocument().addDocumentListener(new DocumentChangeListener(cssRgbTextField, cssCopyButton));
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        baseContentPanel = new javax.swing.JPanel();
        leftPanel = new javax.swing.JPanel();
        paletteToolBar = new javax.swing.JToolBar();
        jLabel5 = new javax.swing.JLabel();
        paletteListComboBox = new javax.swing.JComboBox();
        addPaletteButton = new javax.swing.JButton();
        deletePaletteButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        addColorButton = new javax.swing.JButton();
        editColorButton = new javax.swing.JButton();
        deleteColorButton = new javax.swing.JButton();
        paletteContentPanel = new javax.swing.JPanel();
        colorDetailsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        redRgbTextField = new javax.swing.JTextField();
        greenRgbTextField = new javax.swing.JTextField();
        blueRgbTextField = new javax.swing.JTextField();
        cssRgbTextField = new javax.swing.JTextField();
        rgbCopyButton = new javax.swing.JButton();
        hexCopyButton = new javax.swing.JButton();
        cssCopyButton = new javax.swing.JButton();
        hexColorTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        enlargedPanel = new javax.swing.JPanel();
        colorSourceTabbedPane = new javax.swing.JTabbedPane();
        imageViewerPanel = new javax.swing.JPanel();
        imageControlToolBar = new javax.swing.JToolBar();
        openImageButton = new javax.swing.JButton();
        imageContainerPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        baseMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        hideMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("i18n/Message"); // NOI18N
        setTitle(bundle.getString("lbl.frame.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(730, 480));
        setPreferredSize(new java.awt.Dimension(730, 480));
        addWindowListener(formListener);
        addKeyListener(formListener);

        leftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("lbl.palette.panel.header"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(153, 153, 255))); // NOI18N

        paletteToolBar.setFloatable(false);
        paletteToolBar.setRollover(true);

        jLabel5.setText(bundle.getString("lbl.palette.list")); // NOI18N
        paletteToolBar.add(jLabel5);

        paletteListComboBox.setMaximumSize(new java.awt.Dimension(280, 32767));
        paletteListComboBox.setMinimumSize(new java.awt.Dimension(100, 20));
        paletteListComboBox.setPreferredSize(new java.awt.Dimension(100, 20));
        paletteListComboBox.addItemListener(formListener);
        paletteListComboBox.addActionListener(formListener);
        paletteListComboBox.addPropertyChangeListener(formListener);
        paletteToolBar.add(paletteListComboBox);

        addPaletteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new_palette.png"))); // NOI18N
        addPaletteButton.setToolTipText(bundle.getString("tip.add.palette.button")); // NOI18N
        addPaletteButton.setFocusable(false);
        addPaletteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addPaletteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addPaletteButton.addActionListener(formListener);
        paletteToolBar.add(addPaletteButton);

        deletePaletteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete_palette.png"))); // NOI18N
        deletePaletteButton.setToolTipText(bundle.getString("tip.delete.palette.button")); // NOI18N
        deletePaletteButton.setEnabled(false);
        deletePaletteButton.setFocusable(false);
        deletePaletteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deletePaletteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deletePaletteButton.addActionListener(formListener);
        paletteToolBar.add(deletePaletteButton);
        paletteToolBar.add(jSeparator2);

        addColorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add_color.png"))); // NOI18N
        addColorButton.setText(bundle.getString("lbl.add.color.button")); // NOI18N
        addColorButton.setToolTipText(bundle.getString("tip.add.color.button")); // NOI18N
        addColorButton.setEnabled(false);
        addColorButton.setFocusable(false);
        addColorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addColorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addColorButton.addActionListener(formListener);
        paletteToolBar.add(addColorButton);

        editColorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit_color.png"))); // NOI18N
        editColorButton.setText(bundle.getString("lbl.edit.color.button")); // NOI18N
        editColorButton.setToolTipText(bundle.getString("tip.edit.selected.color.button")); // NOI18N
        editColorButton.setEnabled(false);
        editColorButton.setFocusable(false);
        editColorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editColorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editColorButton.addActionListener(formListener);
        paletteToolBar.add(editColorButton);

        deleteColorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete_color.png"))); // NOI18N
        deleteColorButton.setText(bundle.getString("lbl.delete.color.button")); // NOI18N
        deleteColorButton.setToolTipText(bundle.getString("tip.delete.color.button")); // NOI18N
        deleteColorButton.setEnabled(false);
        deleteColorButton.setFocusable(false);
        deleteColorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteColorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteColorButton.addActionListener(formListener);
        paletteToolBar.add(deleteColorButton);

        paletteContentPanel.setBackground(new java.awt.Color(0, 0, 0));
        paletteContentPanel.setComponentOrientation(
            ComponentOrientation.RIGHT_TO_LEFT);

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paletteToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(paletteContentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addComponent(paletteToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paletteContentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setText("Red");

        jLabel2.setText("Green");

        jLabel3.setText("Blue");

        jLabel4.setText("HEX");

        redRgbTextField.setEditable(false);
        redRgbTextField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        redRgbTextField.setForeground(java.awt.Color.red);
        redRgbTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        redRgbTextField.setMinimumSize(new java.awt.Dimension(50, 20));
        redRgbTextField.setPreferredSize(new java.awt.Dimension(50, 20));

        greenRgbTextField.setEditable(false);
        greenRgbTextField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        greenRgbTextField.setForeground(java.awt.Color.green);
        greenRgbTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        greenRgbTextField.setMinimumSize(new java.awt.Dimension(50, 20));
        greenRgbTextField.setPreferredSize(new java.awt.Dimension(50, 20));

        blueRgbTextField.setEditable(false);
        blueRgbTextField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        blueRgbTextField.setForeground(java.awt.Color.blue);
        blueRgbTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        blueRgbTextField.setMinimumSize(new java.awt.Dimension(50, 20));
        blueRgbTextField.setPreferredSize(new java.awt.Dimension(50, 20));

        cssRgbTextField.setEditable(false);
        cssRgbTextField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cssRgbTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        cssRgbTextField.addActionListener(formListener);

        rgbCopyButton.setText(bundle.getString("lbl.copy.button")); // NOI18N
        rgbCopyButton.setEnabled(false);
        rgbCopyButton.addActionListener(formListener);

        hexCopyButton.setText(bundle.getString("lbl.copy.button")); // NOI18N
        hexCopyButton.setEnabled(false);
        hexCopyButton.addActionListener(formListener);

        cssCopyButton.setText(bundle.getString("lbl.copy.button")); // NOI18N
        cssCopyButton.setEnabled(false);
        cssCopyButton.addActionListener(formListener);

        hexColorTextField.setEditable(false);
        hexColorTextField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        hexColorTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jLabel6.setText(bundle.getString("lbl.rgb")); // NOI18N

        jLabel7.setText("CSS");

        javax.swing.GroupLayout colorDetailsPanelLayout = new javax.swing.GroupLayout(colorDetailsPanel);
        colorDetailsPanel.setLayout(colorDetailsPanelLayout);
        colorDetailsPanelLayout.setHorizontalGroup(
            colorDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(colorDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(colorDetailsPanelLayout.createSequentialGroup()
                        .addGroup(colorDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(colorDetailsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hexColorTextField))
                            .addGroup(colorDetailsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cssRgbTextField)))
                        .addGroup(colorDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(colorDetailsPanelLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(cssCopyButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorDetailsPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hexCopyButton))))
                    .addGroup(colorDetailsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGroup(colorDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(colorDetailsPanelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel1))
                            .addGroup(colorDetailsPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(redRgbTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(colorDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(colorDetailsPanelLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel2))
                            .addGroup(colorDetailsPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(greenRgbTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(colorDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(colorDetailsPanelLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel3))
                            .addGroup(colorDetailsPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(blueRgbTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rgbCopyButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        colorDetailsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel6, jLabel7});

        colorDetailsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cssCopyButton, hexCopyButton, rgbCopyButton});

        colorDetailsPanelLayout.setVerticalGroup(
            colorDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(colorDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(redRgbTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(greenRgbTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blueRgbTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rgbCopyButton))
                .addGap(4, 4, 4)
                .addGroup(colorDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hexColorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(hexCopyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cssRgbTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(cssCopyButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        colorDetailsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {blueRgbTextField, cssCopyButton, cssRgbTextField, greenRgbTextField, hexColorTextField, hexCopyButton, jLabel4, jLabel6, jLabel7, redRgbTextField, rgbCopyButton});

        colorDetailsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3});

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("lbl.enlarged.header"))); // NOI18N

        enlargedPanel.setBackground(new java.awt.Color(255, 255, 255));
        enlargedPanel.setMaximumSize(new java.awt.Dimension(200, 100));
        enlargedPanel.setMinimumSize(new java.awt.Dimension(200, 100));
        enlargedPanel.setPreferredSize(new java.awt.Dimension(200, 100));

        javax.swing.GroupLayout enlargedPanelLayout = new javax.swing.GroupLayout(enlargedPanel);
        enlargedPanel.setLayout(enlargedPanelLayout);
        enlargedPanelLayout.setHorizontalGroup(
            enlargedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        enlargedPanelLayout.setVerticalGroup(
            enlargedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(enlargedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(enlargedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        imageViewerPanel.setLayout(new java.awt.BorderLayout());

        imageControlToolBar.setFloatable(false);
        imageControlToolBar.setRollover(true);

        openImageButton.setText(bundle.getString("lbl.open.image.button")); // NOI18N
        openImageButton.setFocusable(false);
        openImageButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openImageButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openImageButton.addActionListener(formListener);
        imageControlToolBar.add(openImageButton);

        imageViewerPanel.add(imageControlToolBar, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout imageContainerPanelLayout = new javax.swing.GroupLayout(imageContainerPanel);
        imageContainerPanel.setLayout(imageContainerPanelLayout);
        imageContainerPanelLayout.setHorizontalGroup(
            imageContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
        );
        imageContainerPanelLayout.setVerticalGroup(
            imageContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 245, Short.MAX_VALUE)
        );

        imageViewerPanel.add(imageContainerPanel, java.awt.BorderLayout.CENTER);

        colorSourceTabbedPane.addTab(bundle.getString("lbl.image.tab.title"), imageViewerPanel); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 268, Short.MAX_VALUE)
        );

        colorSourceTabbedPane.addTab("tab2", jPanel3);

        javax.swing.GroupLayout baseContentPanelLayout = new javax.swing.GroupLayout(baseContentPanel);
        baseContentPanel.setLayout(baseContentPanelLayout);
        baseContentPanelLayout.setHorizontalGroup(
            baseContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(baseContentPanelLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(baseContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(colorSourceTabbedPane)
                    .addGroup(baseContentPanelLayout.createSequentialGroup()
                        .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addGroup(baseContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(colorDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(1, 1, 1))
        );
        baseContentPanelLayout.setVerticalGroup(
            baseContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(baseContentPanelLayout.createSequentialGroup()
                .addGroup(baseContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(leftPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(baseContentPanelLayout.createSequentialGroup()
                        .addComponent(colorDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2)
                .addComponent(colorSourceTabbedPane)
                .addGap(2, 2, 2))
        );

        getContentPane().add(baseContentPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setText(bundle.getString("lbl.file.menu")); // NOI18N

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new_palette.png"))); // NOI18N
        newMenuItem.setText(bundle.getString("lbl.new.menu.item")); // NOI18N
        newMenuItem.addActionListener(formListener);
        fileMenu.add(newMenuItem);
        fileMenu.add(jSeparator1);

        hideMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        hideMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/hide.png"))); // NOI18N
        hideMenuItem.setText(bundle.getString("lbl.hide.menu.item")); // NOI18N
        hideMenuItem.addActionListener(formListener);
        fileMenu.add(hideMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit.png"))); // NOI18N
        exitMenuItem.setText(bundle.getString("lbl.exit.menu.item")); // NOI18N
        exitMenuItem.addActionListener(formListener);
        fileMenu.add(exitMenuItem);

        baseMenuBar.add(fileMenu);

        jMenu2.setText("Edit");
        baseMenuBar.add(jMenu2);

        setJMenuBar(baseMenuBar);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.ItemListener, java.awt.event.KeyListener, java.awt.event.WindowListener, java.beans.PropertyChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == paletteListComboBox) {
                ColorHoundBaseFrame.this.paletteListComboBoxActionPerformed(evt);
            }
            else if (evt.getSource() == addColorButton) {
                ColorHoundBaseFrame.this.addColorButtonActionPerformed(evt);
            }
            else if (evt.getSource() == editColorButton) {
                ColorHoundBaseFrame.this.editColorButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteColorButton) {
                ColorHoundBaseFrame.this.deleteColorButtonActionPerformed(evt);
            }
            else if (evt.getSource() == cssRgbTextField) {
                ColorHoundBaseFrame.this.cssRgbTextFieldActionPerformed(evt);
            }
            else if (evt.getSource() == rgbCopyButton) {
                ColorHoundBaseFrame.this.rgbCopyButtonActionPerformed(evt);
            }
            else if (evt.getSource() == hexCopyButton) {
                ColorHoundBaseFrame.this.hexCopyButtonActionPerformed(evt);
            }
            else if (evt.getSource() == cssCopyButton) {
                ColorHoundBaseFrame.this.cssCopyButtonActionPerformed(evt);
            }
            else if (evt.getSource() == openImageButton) {
                ColorHoundBaseFrame.this.openImageButtonActionPerformed(evt);
            }
            else if (evt.getSource() == newMenuItem) {
                ColorHoundBaseFrame.this.newMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == hideMenuItem) {
                ColorHoundBaseFrame.this.hideMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == exitMenuItem) {
                ColorHoundBaseFrame.this.exitMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == addPaletteButton) {
                ColorHoundBaseFrame.this.addPaletteButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deletePaletteButton) {
                ColorHoundBaseFrame.this.deletePaletteButtonActionPerformed(evt);
            }
        }

        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            if (evt.getSource() == paletteListComboBox) {
                ColorHoundBaseFrame.this.paletteListComboBoxItemStateChanged(evt);
            }
        }

        public void keyPressed(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == ColorHoundBaseFrame.this) {
                ColorHoundBaseFrame.this.formKeyPressed(evt);
            }
        }

        public void keyReleased(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == ColorHoundBaseFrame.this) {
                ColorHoundBaseFrame.this.formKeyReleased(evt);
            }
        }

        public void keyTyped(java.awt.event.KeyEvent evt) {
        }

        public void windowActivated(java.awt.event.WindowEvent evt) {
        }

        public void windowClosed(java.awt.event.WindowEvent evt) {
        }

        public void windowClosing(java.awt.event.WindowEvent evt) {
            if (evt.getSource() == ColorHoundBaseFrame.this) {
                ColorHoundBaseFrame.this.formWindowClosing(evt);
            }
        }

        public void windowDeactivated(java.awt.event.WindowEvent evt) {
        }

        public void windowDeiconified(java.awt.event.WindowEvent evt) {
        }

        public void windowIconified(java.awt.event.WindowEvent evt) {
        }

        public void windowOpened(java.awt.event.WindowEvent evt) {
        }

        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            if (evt.getSource() == paletteListComboBox) {
                ColorHoundBaseFrame.this.paletteListComboBoxPropertyChange(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        
    }//GEN-LAST:event_formKeyReleased

    private void deleteColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteColorButtonActionPerformed
        if(null != ColorPaletteManager.getInstance().getSelectPanel()){
            paletteContentPanel.remove(ColorPaletteManager.getInstance().getSelectPanel());
            paletteContentPanel.updateUI();
            ColorPaletteManager.getInstance().removeSelectedPanel(getPaletteName());
            ColorPanelSelectedEvent event = new ColorPanelSelectedEvent
                (true, false, this);
            ApplicationEventManager.getInstance().fireEvent(event);
        }
    }//GEN-LAST:event_deleteColorButtonActionPerformed

    private void addColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addColorButtonActionPerformed
        String palette = getPaletteName();
        if(!"".equals(palette)){
            ColorPanel colorPanel = new ColorPanel(paletteContentPanel, getPaletteName());
            ColorPaletteManager.getInstance().addPanel(getPaletteName(), colorPanel);
            paletteContentPanel.add(colorPanel, FlowLayout.LEFT);
            paletteContentPanel.updateUI();
        }
        else {
            JOptionPane.showMessageDialog(this, "Plase add a Palette...");
        }
        
    }//GEN-LAST:event_addColorButtonActionPerformed

    private void editColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editColorButtonActionPerformed
    	ColorPaletteManager.getInstance().makeSelectedColorPanelEditable(getPaletteName());
    }//GEN-LAST:event_editColorButtonActionPerformed

    private void rgbCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgbCopyButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rgbCopyButtonActionPerformed

    private void hexCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hexCopyButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hexCopyButtonActionPerformed

    private void cssCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cssCopyButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cssCopyButtonActionPerformed

    private void openImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImageButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_openImageButtonActionPerformed

    private void cssRgbTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cssRgbTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cssRgbTextFieldActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        String name = JOptionPane.showInputDialog(this, "Enter a Palette Name: ");
        ColorPaletteManager.getInstance().addPalette(name);
        paletteListComboBox.addItem(name);
        paletteListComboBox.setSelectedItem(name);
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void paletteListComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_paletteListComboBoxPropertyChange
        //System.out.println("paletteListComboBoxPropertyChange");
    }//GEN-LAST:event_paletteListComboBoxPropertyChange

    private void paletteListComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_paletteListComboBoxItemStateChanged
        //System.out.println("paletteListComboBoxItemStateChanged");
    }//GEN-LAST:event_paletteListComboBoxItemStateChanged

    private void paletteListComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paletteListComboBoxActionPerformed
        if(null != paletteListComboBox.getSelectedItem()){
            String selectedPaletteName = paletteListComboBox.getSelectedItem().toString();
            final List<ColorPanel> cps = 
                ColorPaletteManager.getInstance().getAllColorPanels(
                selectedPaletteName
                );
            if(null != cps){
                paletteContentPanel.removeAll();
                for (ColorPanel cp : cps) {
                    paletteContentPanel.add(cp);
                }
                paletteContentPanel.updateUI();
            }
            addColorButton.setEnabled(true);
            deletePaletteButton.setEnabled(true);
        } else {
            addColorButton.setEnabled(false);
            deletePaletteButton.setEnabled(false);
            editColorButton.setEnabled(false);
            deleteColorButton.setEnabled(false);
            paletteContentPanel.removeAll();
            paletteContentPanel.updateUI();
            ColorPaletteManager.getInstance().removeSelection();
        }
        
    }//GEN-LAST:event_paletteListComboBoxActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        ActionListener exitListener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        };
        minimizeToTray(this, frameIcon.getImage(), exitListener);
    }//GEN-LAST:event_formWindowClosing

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if(!appContext.getApplicationSettings().isDoNotShowExitDialog()){
            int opt = JOptionPane.showConfirmDialog(this, "Do you want to exit the program?");
            if(JOptionPane.YES_OPTION == opt){
                appContext.save();
                System.exit(0);
            }
        } else {
            appContext.save();
            System.exit(0);
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void hideMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideMenuItemActionPerformed
        ActionListener exitListener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        };
        minimizeToTray(this, frameIcon.getImage(), exitListener);
    }//GEN-LAST:event_hideMenuItemActionPerformed

    private void addPaletteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPaletteButtonActionPerformed
        newMenuItemActionPerformed(evt);
    }//GEN-LAST:event_addPaletteButtonActionPerformed

    private void deletePaletteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePaletteButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deletePaletteButtonActionPerformed

    public TrayIcon minimizeToTray(final Frame frame, final Image image, ActionListener exitListener) {
        final PopupMenu popup = new PopupMenu();
        final TrayIcon trayIcon = new TrayIcon(image, frame.getTitle(), popup);

        ActionListener actionListener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                trayIcon.displayMessage("Action Event",
                        "An Action Event Has Been Performed!",
                        TrayIcon.MessageType.INFO);
            }
        };
        if (SystemTray.isSupported()) {
            // get the SystemTray instance
            final SystemTray tray = SystemTray.getSystemTray();
            MouseListener mouseListener = new MouseListener() {
                public void mouseClicked(MouseEvent e) {
                    if (MouseEvent.BUTTON1 == e.getButton() 
                            && e.getClickCount() == 2) {
                        tray.remove(trayIcon);
                        frame.setVisible(true);
                    }
                }

                public void mouseEntered(MouseEvent e) {
                    
                }

                public void mouseExited(MouseEvent e) {
                    
                }

                public void mousePressed(MouseEvent e) {
                    
                    
                }

                public void mouseReleased(MouseEvent e) {
                    
                    
                }
            };




            MenuItem restoreItem = new MenuItem("Restore");
            restoreItem.setShortcut(new MenuShortcut('R'));
            restoreItem.addActionListener(
                    new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    tray.remove(trayIcon);
                    frame.setVisible(true);
                }
            });
            popup.add(restoreItem);

            MenuItem exitItem = new MenuItem("Exit");
            exitItem.addActionListener(exitListener);
            popup.add(exitItem);

            trayIcon.setImageAutoSize(true);
            trayIcon.addActionListener(actionListener);
            trayIcon.addMouseListener(mouseListener);

            try {
                tray.add(trayIcon);
                frame.setVisible(false);
            } catch (AWTException e) {
                System.err.println("TrayIcon could not be added.");
            }

            return trayIcon;
        } else {
            // disable tray option in your application or
            // perform other actions
        }
        return null;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addColorButton;
    private javax.swing.JButton addPaletteButton;
    private javax.swing.JPanel baseContentPanel;
    private javax.swing.JMenuBar baseMenuBar;
    private javax.swing.JTextField blueRgbTextField;
    private javax.swing.JPanel colorDetailsPanel;
    private javax.swing.JTabbedPane colorSourceTabbedPane;
    private javax.swing.JButton cssCopyButton;
    private javax.swing.JTextField cssRgbTextField;
    private javax.swing.JButton deleteColorButton;
    private javax.swing.JButton deletePaletteButton;
    private javax.swing.JButton editColorButton;
    private javax.swing.JPanel enlargedPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextField greenRgbTextField;
    private javax.swing.JTextField hexColorTextField;
    private javax.swing.JButton hexCopyButton;
    private javax.swing.JMenuItem hideMenuItem;
    private javax.swing.JPanel imageContainerPanel;
    private javax.swing.JToolBar imageControlToolBar;
    private javax.swing.JPanel imageViewerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JButton openImageButton;
    private javax.swing.JPanel paletteContentPanel;
    private javax.swing.JComboBox paletteListComboBox;
    private javax.swing.JToolBar paletteToolBar;
    private javax.swing.JTextField redRgbTextField;
    private javax.swing.JButton rgbCopyButton;
    // End of variables declaration//GEN-END:variables

    public void colorGrabbed(ColorGrabEvent event) {
        System.out.println(event.getNewValue());
    }

    
    public String getPaletteName(){
        return (null != paletteListComboBox.getSelectedItem())
                ? paletteListComboBox.getSelectedItem().toString() : "";
    }

    public void colorPanelSelected(ColorPanelSelectedEvent event) {
        if(event.getNewValue()){
            editColorButton.setEnabled(true);
            deleteColorButton.setEnabled(true);
            if(event.getSelectedColor() != null){
                redRgbTextField.setText(""+event.getSelectedColor().getRed());
                greenRgbTextField.setText(""+event.getSelectedColor().getGreen());
                blueRgbTextField.setText(""+event.getSelectedColor().getBlue());
                hexColorTextField.setText(GraphicsUtil.encodeColor(event.getSelectedColor()));
                cssRgbTextField.setText(GraphicsUtil.encodeColorForCss(event.getSelectedColor()));
            }
        } else {
            editColorButton.setEnabled(false);
            deleteColorButton.setEnabled(false);
        }
    }
    
    
    
    private class DocumentChangeListener implements DocumentListener{

        private final JTextField sourceField;
        private final JButton targetButton;

        public DocumentChangeListener(JTextField sourceField, JButton targetButton) {
            this.sourceField = sourceField;
            this.targetButton = targetButton;
        }
        
        public void insertUpdate(DocumentEvent e) {
            if(null != sourceField && !"".equals(sourceField.getText())){
                targetButton.setEnabled(true);
            } else {
                targetButton.setEnabled(true);
            }
        }

        public void removeUpdate(DocumentEvent e) {
            if(null != sourceField && !"".equals(sourceField.getText())){
                targetButton.setEnabled(true);
            } else {
                targetButton.setEnabled(true);
            }
        }

        public void changedUpdate(DocumentEvent e) {
            if(null != sourceField && !"".equals(sourceField.getText())){
                targetButton.setEnabled(true);
            } else {
                targetButton.setEnabled(true);
            }
        }
        
    }
}
