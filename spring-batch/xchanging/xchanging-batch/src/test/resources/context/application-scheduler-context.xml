<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">


<!-- Spring Batch job configuration -->
	<bean id="transactionManager"
		class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />

	
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.SimpleJobRepository">
		<constructor-arg>
			<bean
				class="org.springframework.batch.core.repository.dao.MapJobInstanceDao" />
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.springframework.batch.core.repository.dao.MapJobExecutionDao" />
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.springframework.batch.core.repository.dao.MapStepExecutionDao" />
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.springframework.batch.core.repository.dao.MapExecutionContextDao" />
		</constructor-arg>
	</bean>

	<bean id="jobRegistry"
		class="org.springframework.batch.core.configuration.support.MapJobRegistry">
	</bean>

	<bean id="jobRegistryBeanPostProcessor"
		class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
		<property name="jobRegistry" ref="jobRegistry" />
	</bean>

	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
		<property name="taskExecutor">
			<bean class="org.springframework.core.task.SimpleAsyncTaskExecutor" />
		</property>
	</bean>

	<bean id="taskletStep" abstract="true"
		class="org.springframework.batch.core.step.tasklet.TaskletStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<bean id="csvReverseJob" class="org.springframework.batch.core.job.SimpleJob">
		<property name="name" value="csvReverseJob" />
		<property name="steps">
			<list>
				<bean parent="taskletStep">
					<property name="tasklet" ref="csvDownloader" />
				</bean>
				
				<bean parent="taskletStep">
					<property name="tasklet" ref="csv2excelProcessor" />
				</bean>
				
				<bean parent="taskletStep">
					<property name="tasklet" ref="csvProcessor" />
				</bean>
			</list>
		</property>
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<bean id="csvDownloader" class="com.gmail.sabuj.career.batch.CsvDownloader">
		<property name="sourceUrl" value="${source.csv.url}" />
		<property name="targetFileName" value="${download.to.csv.fileName}" />
	</bean>

	<bean id="csvProcessor" class="com.gmail.sabuj.career.batch.CsvReverseProcessor">
		<property name="sourceFileName" value="${download.to.csv.fileName}.xls" />
		<property name="targetFileName" value="${reverse.csv.fileName}" />
	</bean>
	
	<bean id="csv2excelProcessor" class="com.gmail.sabuj.career.batch.Csv2ExcelProcessor">
		<property name="sourceFileName" value="${download.to.csv.fileName}" />
		<property name="targetFileName" value="${download.to.csv.fileName}.xls" />
	</bean>

	<bean id="csvBatchProcessorJobDetail" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass"
			value="com.gmail.sabuj.career.batch.JobLauncherDetails" />
		<property name="group" value="quartz-batch" />
		<property name="jobDataAsMap">
			<map>
				<entry key="jobName" value="csvReverseJob" />
				<entry key="jobLocator" value-ref="jobRegistry" />
				<entry key="jobLauncher" value-ref="jobLauncher" />
			</map>
		</property>
	</bean>

<!-- Quartz scheduler and Cron Trigger -->
	<bean id="csvBatchProcessorCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="csvBatchProcessorJobDetail" />
		<property name="cronExpression" value="${csv.batch.processor.cron.expression}" />
	</bean>

	<bean id="springBeanJobFactory"
		class="org.springframework.scheduling.quartz.SpringBeanJobFactory" />

	<bean id="quartzSchedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="schedulerName" value="csvReverseCronScheduler" />
		<property name="autoStartup" value="true" />
		<property name="jobFactory" ref="springBeanJobFactory" />
		<property name="exposeSchedulerInRepository" value="false" />
		<property name="waitForJobsToCompleteOnShutdown" value="true" />
		<property name="overwriteExistingJobs" value="${quartz.scheduler.overwrite.existing.jobs}" />

		<property name="applicationContextSchedulerContextKey" value="applicationContext" />

		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.scheduler.instanceId">AUTO</prop>
				<prop key="org.quartz.threadPool.class">${org.quartz.threadPool.class}</prop>
				<prop key="org.quartz.threadPool.threadCount">${org.quartz.threadPool.threadCount}</prop>
				<prop key="org.quartz.threadPool.threadPriority">${org.quartz.threadPool.threadPriority}</prop>
				<prop key="org.quartz.jobStore.misfireThreshold">60000</prop>

				<prop key="org.quartz.jobStore.class">${org.quartz.jobStore.class}</prop>

				<prop key="org.quartz.plugin.shutdownhook.class">org.quartz.plugins.management.ShutdownHookPlugin
				</prop>
				<prop key="org.quartz.plugin.shutdownhook.cleanShutdown">true</prop>
				<prop key="org.quartz.plugin.triggHistory.class">
					org.quartz.plugins.history.LoggingTriggerHistoryPlugin
				</prop>
				<prop key="org.quartz.plugin.triggHistory.triggerFiredMessage">
					{4, date, dd/MM/yyyy HH:mm:ss}: Trigger "{1}.{0}"
					fired job "{6}.{5}"
				</prop>
				<prop key="org.quartz.plugin.triggHistory.triggerCompleteMessage">
					{4, date, dd/MM/yyyy HH:mm:ss}: Trigger "{1}.{0}"
					completed firing job
					"{6}.{5}" with resulting
					trigger instruction
					code: {9}
				</prop>
			</props>
		</property>



		<property name="triggers">
			<list>
				<ref bean="csvBatchProcessorCronTrigger" />
			</list>
		</property>
	</bean>
	
</beans>
